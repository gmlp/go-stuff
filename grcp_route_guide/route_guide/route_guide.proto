syntax = "proto3";


service RouteGuide {
  // A simple or Unary RPC method
  // Obtains the feature at a given position
  // A Feature with empty name is returned if there's no feature at the given
  //position.
  rpc GetFeature(Point) returns (Feature) {} 

  // A server-side streaming RPC.
  // Obtains the features available within the given Rectangle. Results are 
  // streamed rather than returned at once, as rectangle may cover a large
  // area and contain a huge number of features.
  rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // A client-side streaming RPC.
  // Accepts a stream of Points on a route being traversed, returning a 
  //  RouteSummary when traversal is completed. 
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // A Bidirectional streaming RPC.
  // Accepts a stream of RouteNotes sent while a route is being traversed,
  // while receiving other RouteNotes (e.g. from other users.).
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}

// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitude should be in the range +/- 90 degrees and longitude should be in 
// the range +/- 180 degrees(inclusive)

message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A feature names something at a given point.
//*** if a feature could not be named, the name is empty.
message Feature {
  // the name of the feature
  string name = 1;

  //the point where the feature is detected.
  Point location = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite
// points "lo" and "hi"
message Rectangle {
  // One rectangle corner
  Point lo = 1;
  // the opposite corner of the rectangle.
  Point hi = 2;
} 

// A route summary is received in response to a RecordRoute rpc.
// it contains the number of individual points received, the number of 
// detected features, and the total distance covered as the cumulative sum of 
// the distance between each point.

message RouteSummary {
  // the number of points received.
  int32 point_count = 1;

  // the number of known features passed while traversing the route.
  int32 feature_count = 2;

  // the distance covered in metres.
  int32 distance = 3;

  // The duration of the traversal in seconds
  int32 elapse_time = 4;
}

// A RouteNote is a message sent while at a given point
message RouteNote {
  // the location from which the message is sent.
  Point location = 1;
  // the message to be sent.
  string message = 2;
}